/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/rgb.h>

// layers

#define DEFAULT 0
#define LOWER 1
#define MAGIC 2

/ {
    behaviors {
        // For the "layer" key, it'd nice to be able to use it as either a shift or a toggle.
        // Configure it as a tap dance, so the first tap (or hold) is a &mo and the second tap is a &to

        layer_td: tap_dance_0 {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&mo 0>, <&to 0>;
        };

        hold_tap: hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "HOLD_TAP";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };

        hold_tap_layer: hold_tap_layer {
            compatible = "zmk,behavior-hold-tap";
            label = "HOLD_TAP_LAYER";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <0>;
        };

        hold_tap_fast: hold_tap_fast {
            compatible = "zmk,behavior-hold-tap";
            label = "HOLD_TAP_FAST";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <0>;
        };
    };

    macros {
        bt_0: bt_profile_macro_0 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 0>;
        };

        bt_1: bt_profile_macro_1 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 1>;
        };

        bt_2: bt_profile_macro_2 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 2>;
        };

        bt_3: bt_profile_macro_3 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 3>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        lower_layer {
            bindings = <
&none                      &none     &none           &none              &none                                                                                                                                       &none         &kp C_VOL_DN   &kp C_VOL_UP        &none           &none
&trans                     &none     &kp F2          &kp C_VOLUME_DOWN  &kp C_VOLUME_UP  &none                                                                                                           &none      &none         &kp RC(W)      &kp RC(RS(T))       &kp F12         &none
&kp DEL                    &none     &none           &mmv MOVE_UP       &kp LC(LS(TAB))  &kp LC(TAB)                                                                                                     &none      &kp RA(LEFT)  &kp RC(A)      &kp RA(RIGHT)       &kp RC(S)       &none
&kp TAB                    &mkp MB2  &mmv MOVE_LEFT  &mmv MOVE_DOWN     &mmv MOVE_RIGHT  &msc SCRL_UP                                                                                                    &kp RC(Z)  &kp RC(C)     &kp RC(V)      &kp RS(RA(ESCAPE))  &kp RA(ESCAPE)  &kp RC(T)
&hold_tap LEFT_GUI ESCAPE  &none     &none           &none              &msc SCRL_DOWN   &none         &none     &none      &hold_tap LEFT_SHIFT HOME    &hold_tap RCTRL END      &none   &none          &none      &kp RC(Y)     &kp RC(SLASH)  &kp RC(F)           &kp RC(H)       &tog 3
&trans                     &none     &none           &kp LEFT           &kp RIGHT                      &mkp MB3  &mkp LCLK  &kp ENTER                    &hold_tap_layer 2 SPACE  &tog 1  &kp BACKSPACE             &kp UP_ARROW  &kp DOWN       &none               &none           &trans
            >;
        };

        default_layer {
            // ---------------------------------------------------------------------------------------------------------------------------------
            // |  F1   |  F2 |  F3 |  F4  |  F5  |                                                               |  F6   |  F7   |  F8  |   F9  |  F10 |
            // |  =    |  1  |  2  |  3   |  4   |  5   |                                                 |  6   |   7   |   8   |  9   |   0   |   -  |
            // |  TAB  |  Q  |  W  |  E   |  R   |  T   |                                                 |  Y   |   U   |   I   |  O   |   P   |   \  |
            // |  ESC  |  A  |  S  |  D   |  F   |  G   |                                                 |  H   |   J   |   K   |  L   |   ;   |   '  |
            // |   `   |  Z  |  X  |  C   |  V   |  B   | LSHFT | LCTRL | LOWER | | LGUI  | RCTRL | RSHFT |  N   |   M   |   ,   |  .   |   /   | PGUP |
            // | MAGIC | HOME| END | LEFT | RIGHT|      | BSPC  | DEL   | LALT  | | RALT  | RET   | SPACE |      |  UP   | DOWN  |  [   |   ]   | PGDN |

            bindings = <
&kp F1                     &kp F2                           &kp F3                     &kp F4                     &kp F5                                                                                                                                                                                                        &kp F6               &kp F7                     &kp F8                           &kp F9                            &kp F10
&hold_tap EQUAL LS(EQUAL)  &hold_tap NUMBER_1 LS(NUMBER_1)  &hold_tap N2 LS(NUMBER_2)  &hold_tap N3 LS(NUMBER_3)  &hold_tap N4 LS(NUMBER_4)  &hold_tap N5 LS(N5)                                                                                                                                     &hold_tap N6 RS(NUMBER_6)  &hold_tap N7 RS(N7)  &hold_tap N8 RS(N8)        &hold_tap N9 RS(N9)              &hold_tap N0 RS(N0)               &hold_tap MINUS RS(MINUS)
&kp DEL                    &kp Q                            &kp W                      &kp E                      &kp R                      &kp T                                                                                                                                                   &kp Y                      &kp U                &kp I                      &kp O                            &kp P                             &hold_tap BSLH RS(BACKSLASH)
&kp TAB                    &kp A                            &kp S                      &kp D                      &kp F                      &kp G                                                                                                                                                   &kp H                      &kp J                &kp K                      &kp L                            &hold_tap SEMI RS(SEMI)           &hold_tap SQT RS(APOS)
&hold_tap LEFT_GUI ESCAPE  &kp Z                            &kp X                      &kp C                      &kp V                      &kp B                &none                      &none                      &hold_tap LEFT_SHIFT HOME    &hold_tap RCTRL END      &none   &none          &kp N                      &kp M                &hold_tap COMMA RS(COMMA)  &hold_tap DOT RS(DOT)            &hold_tap FSLH RS(SLASH)          &none
&hold_tap GRAVE LS(GRAVE)  &kp HOME                         &kp END                    &kp LEFT                   &kp RIGHT                                       &hold_tap MINUS LS(MINUS)  &hold_tap EQUAL LS(EQUAL)  &kp ENTER                    &hold_tap_layer 2 SPACE  &tog 1  &kp BACKSPACE                             &kp UP               &kp DOWN                   &hold_tap LBKT RS(LEFT_BRACKET)  &hold_tap RBKT RS(RIGHT_BRACKET)  &none
            >;
        };

        magic_layer {
            bindings = <
&rgb_ug RGB_TOG       &none                 &none     &none         &none                                                                      &none  &none  &none  &none  &rgb_ug RGB_EFR
&none                 &none                 &none     &none         &none      &none                                                    &none  &none  &none  &none  &none  &none
&none                 &none                 &none     &kp UP_ARROW  &none      &none                                                    &none  &none  &none  &none  &none  &none
&bootloader           &none                 &kp LEFT  &kp DOWN      &kp RIGHT  &none                                                    &none  &none  &none  &none  &none  &bootloader
&sys_reset            &none                 &none     &none         &none      &none  &none  &none  &bootloader    &none  &none  &none  &none  &none  &none  &none  &none  &sys_reset
&kp C_BRIGHTNESS_INC  &kp C_BRIGHTNESS_DEC  &none     &none         &none             &none  &none  &none          &none  &none  &none         &none  &none  &none  &none  &rgb_ug RGB_EFF
            >;
        };

        gaming {
            bindings = <
&none  &none  &none  &none  &none                                                            &none  &none  &none  &none  &none
&none  &none  &none  &none  &none  &none                                              &none  &none  &none  &none  &none  &none
&none  &none  &none  &kp W  &none  &none                                              &none  &none  &none  &none  &none  &none
&none  &none  &kp A  &kp S  &kp D  &none                                              &none  &none  &none  &none  &none  &none
&none  &none  &none  &none  &none  &none  &none  &none  &none    &none  &none  &none  &none  &none  &none  &none  &none  &none
&none  &none  &none  &none  &none         &none  &none  &none    &none  &none  &none         &none  &none  &none  &none  &none
            >;
        };
    };
};
