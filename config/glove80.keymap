/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#define ZMK_POINTING_DEFAULT_MOVE_VAL 600  // default: 600
#define ZMK_POINTING_DEFAULT_SCRL_VAL 10    // default: 10

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/rgb.h>

// layers

#define DEFAULT 0
#define LOWER 1
#define MAGIC 2

/ {
    behaviors {
        // For the "layer" key, it'd nice to be able to use it as either a shift or a toggle.
        // Configure it as a tap dance, so the first tap (or hold) is a &mo and the second tap is a &to

        layer_td: tap_dance_0 {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&mo 0>, <&to 0>;
        };

        hold_tap: hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "HOLD_TAP";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };

        hold_tap_layer: hold_tap_layer {
            compatible = "zmk,behavior-hold-tap";
            label = "HOLD_TAP_LAYER";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <0>;
        };

        hold_tap_fast: hold_tap_fast {
            compatible = "zmk,behavior-hold-tap";
            label = "HOLD_TAP_FAST";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <0>;
        };

        tap_dance_windows: tap_dance_windows {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_WINDOWS";
            #binding-cells = <0>;
            bindings = <&kp ESCAPE>, <&kp LEFT_GUI>;
        };
    };

    macros {
        bt_0: bt_profile_macro_0 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 0>;
        };

        bt_1: bt_profile_macro_1 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 1>;
        };

        bt_2: bt_profile_macro_2 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 2>;
        };

        bt_3: bt_profile_macro_3 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 3>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        lower_layer {
            bindings = <
&none               &none     &none           &none              &none                                                                                                                                        &none         &none          &none               &none           &none
&trans              &none     &kp F2          &kp C_VOLUME_DOWN  &kp C_VOLUME_UP  &none                                                                                                            &none      &none         &kp RC(W)      &kp RC(RS(T))       &kp F12         &none
&kp DEL             &none     &none           &mmv MOVE_UP       &kp LC(LS(TAB))  &kp LC(TAB)                                                                                                      &none      &kp RA(LEFT)  &kp RC(A)      &kp RA(RIGHT)       &kp RC(S)       &none
&kp TAB             &mkp MB2  &mmv MOVE_LEFT  &mmv MOVE_DOWN     &mmv MOVE_RIGHT  &msc SCRL_UP                                                                                                     &kp RC(Z)  &kp RC(C)     &kp RC(V)      &kp RS(RA(ESCAPE))  &kp RA(ESCAPE)  &kp RC(T)
&tap_dance_windows  &none     &none           &none              &msc SCRL_DOWN   &none         &hold_tap LEFT_SHIFT HOME  &none      &none        &none          &none   &hold_tap RCTRL END      &none      &kp RC(Y)     &kp RC(SLASH)  &kp RC(F)           &kp RC(H)       &tog 3
&trans              &none     &none           &kp LEFT           &kp RIGHT                      &mkp LCLK                  &kp ENTER  &mkp MCLK    &kp BACKSPACE  &tog 1  &hold_tap_layer 2 SPACE             &kp UP_ARROW  &kp DOWN       &none               &none           &trans
            >;
        };

        default_layer {
            // ---------------------------------------------------------------------------------------------------------------------------------
            // |  F1   |  F2 |  F3 |  F4  |  F5  |                                                               |  F6   |  F7   |  F8  |   F9  |  F10 |
            // |  =    |  1  |  2  |  3   |  4   |  5   |                                                 |  6   |   7   |   8   |  9   |   0   |   -  |
            // |  TAB  |  Q  |  W  |  E   |  R   |  T   |                                                 |  Y   |   U   |   I   |  O   |   P   |   \  |
            // |  ESC  |  A  |  S  |  D   |  F   |  G   |                                                 |  H   |   J   |   K   |  L   |   ;   |   '  |
            // |   `   |  Z  |  X  |  C   |  V   |  B   | LSHFT | LCTRL | LOWER | | LGUI  | RCTRL | RSHFT |  N   |   M   |   ,   |  .   |   /   | PGUP |
            // | MAGIC | HOME| END | LEFT | RIGHT|      | BSPC  | DEL   | LALT  | | RALT  | RET   | SPACE |      |  UP   | DOWN  |  [   |   ]   | PGDN |

            bindings = <
&kp F1                 &kp F2                          &kp F3                      &kp F4                   &kp F5                                                                                                                                                                                    &kp F6                  &kp F7                     &kp F8                             &kp F9                               &kp F10
&hold_tap PLUS EQUAL   &hold_tap EXCLAMATION NUMBER_1  &hold_tap AT_SIGN NUMBER_2  &hold_tap HASH NUMBER_3  &hold_tap DOLLAR NUMBER_4  &hold_tap PERCENT N5                                                                                                                 &hold_tap CARET NUMBER_6  &hold_tap AMPERSAND N7  &hold_tap ASTERISK N8      &hold_tap LEFT_PARENTHESIS N9      &hold_tap RIGHT_PARENTHESIS N0       &hold_tap UNDER MINUS
&kp DEL                &hold_tap LS(Q) Q               &hold_tap LS(W) W           &hold_tap LS(E) E        &hold_tap LS(R) R          &hold_tap LS(T) T                                                                                                                    &hold_tap LS(Y) Y         &hold_tap LS(U) U       &hold_tap LS(I) I          &hold_tap LS(O) O                  &hold_tap LS(P) P                    &hold_tap PIPE BACKSLASH
&kp TAB                &hold_tap LS(A) A               &hold_tap LS(S) S           &hold_tap LS(D) D        &hold_tap LS(F) F          &hold_tap LS(G) G                                                                                                                    &hold_tap LS(H) H         &hold_tap LS(J) J       &hold_tap LS(K) K          &hold_tap LS(L) L                  &hold_tap COLON SEMI                 &hold_tap DOUBLE_QUOTES APOS
&tap_dance_windows     &hold_tap LS(Z) Z               &hold_tap LS(X) X           &hold_tap LS(C) C        &hold_tap LS(V) V          &hold_tap LS(B) B     &hold_tap LEFT_SHIFT HOME  &none      &none                    &none          &none   &hold_tap RCTRL END      &hold_tap LS(N) N         &hold_tap LS(M) M       &hold_tap LESS_THAN COMMA  &hold_tap GREATER_THAN DOT         &hold_tap QUESTION SLASH             &none
&hold_tap TILDE GRAVE  &kp HOME                        &kp END                     &kp LEFT                 &kp RIGHT                                        &hold_tap PLUS EQUAL       &kp ENTER  &hold_tap UNDER MINUS    &kp BACKSPACE  &tog 1  &hold_tap_layer 2 SPACE                            &kp UP                  &kp DOWN                   &hold_tap LEFT_BRACE LEFT_BRACKET  &hold_tap RIGHT_BRACE RIGHT_BRACKET  &none
            >;
        };

        magic_layer {
            bindings = <
&rgb_ug RGB_TOG       &none                 &none     &none         &none                                                                      &none  &none  &none  &none  &rgb_ug RGB_EFR
&none                 &none                 &none     &none         &none      &none                                                    &none  &none  &none  &none  &none  &none
&none                 &none                 &none     &kp UP_ARROW  &none      &none                                                    &none  &none  &none  &none  &none  &none
&bootloader           &none                 &kp LEFT  &kp DOWN      &kp RIGHT  &none                                                    &none  &none  &none  &none  &none  &bootloader
&sys_reset            &none                 &none     &none         &none      &none  &none  &none  &bootloader    &none  &none  &none  &none  &none  &none  &none  &none  &sys_reset
&kp C_BRIGHTNESS_INC  &kp C_BRIGHTNESS_DEC  &none     &none         &none             &none  &none  &none          &none  &none  &none         &none  &none  &none  &none  &rgb_ug RGB_EFF
            >;
        };

        gaming {
            bindings = <
&none  &none  &none  &none  &none                                                            &none  &none  &none  &none  &none
&none  &none  &none  &none  &none  &none                                              &none  &none  &none  &none  &none  &none
&none  &none  &none  &kp W  &none  &none                                              &none  &none  &none  &none  &none  &none
&none  &none  &kp A  &kp S  &kp D  &none                                              &none  &none  &none  &none  &none  &none
&none  &none  &none  &none  &none  &none  &none  &none  &none    &none  &none  &none  &none  &none  &none  &none  &none  &tog 3
&none  &none  &none  &none  &none         &none  &none  &none    &none  &none  &none         &none  &none  &none  &none  &none
            >;
        };
    };
};
